Punkte pro Testfall: 5; 0; Maximum: 25 

Testfall: {-1.1-}[tightPrimeEmbedding i|i<-[-1..5]] == [(0,-1,0),(0,0,0),(0,1,0),(2,2,3),(3,3,5),(3,4,5),(5,5,7)]; Testfall OK 
Testfall: {-1.2-}[tightPrimeEmbedding i|i<-[6..10]] == [(5,6,7),(7,7,11),(7,8,11),(7,9,11),(7,10,11)]; Testfall OK 
Testfall: {-1.3-}[tightPrimeEmbedding i|i<-[11..15]] == [(11,11,13),(11,12,13),(13,13,17),(13,14,17),(13,15,17)]; Testfall OK 
Testfall: {-1.4-}[tightPrimeEmbedding i|i<-[16..20]] == [(13,16,17),(17,17,19),(17,18,19),(19,19,23),(19,20,23)]; Testfall OK 
Testfall: {-1.5-}[tightPrimeEmbedding i|i<-[95..99]] == [(89,95,97),(89,96,97),(97,97,101),(97,98,101),(97,99,101)]; Testfall OK 

Testfaelle OK: 5; Testfaelle FALSCH: 0
Punkte : 25

Punkte pro Testfall: 5; 0; Maximum: 25 

Testfall: {-2.1-}checksum 0 == "0"; Testfall OK 
Testfall: {-2.2-}[checksum i|i<-[1..5]] == ["1","10","11","100","101"]; Testfall OK 
Testfall: {-2.3-}[checksum i|i<-[6..16]] == ["110","111","1000","1001","1","10","11","100","101","110","111"]; Testfall OK 
Testfall: {-2.4-}[checksum i|i<-[17..25]]  == ["1000","1001","1010","10","11","100","101","110","111"]; Testfall OK 
Testfall: {-2.5-}[checksum i|i<-[-5.. -1]]  ; Testfall FALSCH 
Erwartet: {-2.5-}[checksum i|i<-[-5.. -1]] == ["101","100","11","10","1"] 
Ausgabe:  {-2.5-}[checksum i|i<-[-5.. -1]] ==[" ERROR - Control stack overflow   

Testfaelle OK: 4; Testfaelle FALSCH: 1
Punkte : 20

Punkte pro Testfall: 8; 0; Maximum: 24 

Testfall: {-3.1-}filterForFrequency "aba" 2 == "a"; Testfall OK 
Testfall: {-3.2-}[filterForFrequency[a,b,c]3|a<-"abc",b<-"abc",c<-"abc"] == ["a","","","","","","","","","","","","","b","","","","","","","","","","","","","c"]; Testfall OK 
Testfall: {-3.3-}[filterForFrequency[a,b]i|i<-[1..3],a<-"abc",b<-"abc"] == ["","ab","ac","ba","","bc","ca","cb","","a","","","","b","","","","c","","","","","","","","",""]; Testfall OK 

Testfaelle OK: 3; Testfaelle FALSCH: 0
Punkte : 24

Punkte pro Testfall: 9; 0; Maximum: 26 

Testfall: {-4.1-}isPowerOfTwo "x"  ; Testfall FALSCH 
Erwartet: {-4.1-}isPowerOfTwo "x" == False 
Ausgabe:  {-4.1-}isPowerOfTwo "x" ==True   
Testfall: {-4.2-}let s=[]:[c:r|r<-s,c<-"Aax"];in take 9[r|r<-s,isPowerOfTwo r]  ; Testfall FALSCH 
Erwartet: {-4.2-}let s=[]:[c:r|r<-s,c<-"Aax"];in take 9[r|r<-s,isPowerOfTwo r] == ["aA","Aa","aAA","AaA","aaA","xaA","axA","AAa","aAa"] 
Ausgabe:  {-4.2-}let s=[]:[c:r|r<-s,c<-"Aax"];in take 9[r|r<-s,isPowerOfTwo r] ==["","A","a","x","AA","aA","xA","Aa","aa"]   
Testfall: {-4.3-}let s=[]:[c:r|r<-s,c<-"Aax"];in take 9[r|r<-drop 23 s,isPowerOfTwo r]  ; Testfall FALSCH 
Erwartet: {-4.3-}let s=[]:[c:r|r<-s,c<-"Aax"];in take 9[r|r<-drop 23 s,isPowerOfTwo r] == ["aAa","xAa","Aaa","Axa","aAx","Aax","aaAA","xaAA","axAA"] 
Ausgabe:  {-4.3-}let s=[]:[c:r|r<-s,c<-"Aax"];in take 9[r|r<-drop 23 s,isPowerOfTwo r] ==["aAa","xAa","Aaa","xaa","Axa","axa","xxa","AAx","aAx"]   

Testfaelle OK: 0; Testfaelle FALSCH: 3
Punkte : 0

Punkte gesamt: 69

